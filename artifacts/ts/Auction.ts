/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AuctionContractJson } from "../auction/Auction.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AuctionTypes {
  export type Fields = {
    bidderTemplateId: HexString;
    auctioneer: Address;
    beneficiaryAsset: HexString;
    beneficiaryAssetAmount: bigint;
    auctionEndTime: bigint;
    highestBidder: Address;
    highestBid: bigint;
    ended: boolean;
  };

  export type State = ContractState<Fields>;

  export type HighestBidIncreasedEvent = ContractEvent<{
    bidder: Address;
    amount: bigint;
  }>;
  export type AuctionEndedEvent = ContractEvent<{
    winner: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    getAuctioneer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<AuctionInstance, AuctionTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as AuctionTypes.Fields;
  }

  eventIndex = { HighestBidIncreased: 0, AuctionEnded: 1 };
  consts = {
    ErrorCodes: {
      InvalidArg: BigInt(0),
      AuctionAlreadyEnded: BigInt(1),
      BidNotHighEnough: BigInt(2),
      InvalidBidderAddress: BigInt(3),
      BidderNotExists: BigInt(4),
      HighestBidderNotAllowedToWithdraw: BigInt(5),
      AuctionNotYetEnded: BigInt(6),
      AuctionEndAlreadyCalled: BigInt(7),
      InvalidCaller: BigInt(8),
    },
  };

  at(address: string): AuctionInstance {
    return new AuctionInstance(address);
  }

  tests = {
    getAuctioneer: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getAuctioneer", params);
    },
    bid: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        { from: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "bid", params);
    },
    getBidder: async (
      params: TestContractParams<AuctionTypes.Fields, { address: Address }>
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getBidder", params);
    },
    withdraw: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    auctionEnd: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "auctionEnd", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Auction = new Factory(
  Contract.fromJson(
    AuctionContractJson,
    "",
    "6f45e2992040f7ef9b6e4ced2b3e9fd30c9611f72533b51dc886296dee420ffb"
  )
);

// Use this class to interact with the blockchain
export class AuctionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AuctionTypes.State> {
    return fetchContractState(Auction, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeHighestBidIncreasedEvent(
    options: EventSubscribeOptions<AuctionTypes.HighestBidIncreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "HighestBidIncreased",
      fromCount
    );
  }

  subscribeAuctionEndedEvent(
    options: EventSubscribeOptions<AuctionTypes.AuctionEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "AuctionEnded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      AuctionTypes.HighestBidIncreasedEvent | AuctionTypes.AuctionEndedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Auction.contract, this, options, fromCount);
  }

  methods = {
    getAuctioneer: async (
      params?: AuctionTypes.CallMethodParams<"getAuctioneer">
    ): Promise<AuctionTypes.CallMethodResult<"getAuctioneer">> => {
      return callMethod(
        Auction,
        this,
        "getAuctioneer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends AuctionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AuctionTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Auction,
      this,
      calls,
      getContractByCodeHash
    )) as AuctionTypes.MultiCallResults<Calls>;
  }
}
